/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJavaParser.java */
import java.util.List;
import java.util.Vector;

  public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants, MiniJavaParserConstants {/*@bgen(jjtree)*/
  protected static JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();

/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/
  static final public void Goal() throws ParseException {
 /*@bgen(jjtree) Goal */
  ASTGoal jjtn000 = new ASTGoal(JJTGOAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        TypeDeclaration();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MainClass() throws ParseException {
 /*@bgen(jjtree) MainClass */
        ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CLASS);
      t = Identifier();
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LSQPAREN);
      jj_consume_token(RSQPAREN);
      Identifier();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      PrintStatement(new SymbId(new SymbId( t.image ),"main"));
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TypeDeclaration() throws ParseException {
 /*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        ClassDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ClassExtendsDeclaration();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ClassDeclaration() throws ParseException {
 /*@bgen(jjtree) ClassDeclaration */
        ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String oldPath="";
        Symbols.Class c;
        SymbId s_id;
        Symbols.Variable var;
        Symbols.Function func;
    try {
      jj_consume_token(CLASS);
      t = Identifier();
                s_id=new SymbId( t.image );
                c=new Symbols.Class( s_id, "", jjtn000.pos(jj_input_stream), null );

                if( jjtn000._symbols.get(new SymbId( s_id,"this" ))==null )
                        jjtn000._symbols.put( new SymbId(s_id,"this"), new Symbols.Variable(new SymbId(s_id,"this"), t.image,"","java") );
                jjtn000._types.put( s_id, c );
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INTEGER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        var = VarDeclaration(s_id);
                                                c._variables.put(var ._name.getName(),var);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        func = MethodDeclaration(s_id);
                                        c._methods  .put(func._name.getName(),func);
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ClassExtendsDeclaration() throws ParseException {
 /*@bgen(jjtree) ClassExtendsDeclaration */
        ASTClassExtendsDeclaration jjtn000 = new ASTClassExtendsDeclaration(JJTCLASSEXTENDSDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        Token parentClass;
        String oldPath;
        Symbols.Class symbol;
        Symbols.Class c;
        SymbId s_id;
        Symbols.Variable var;
        Symbols.Function func;
    try {
      jj_consume_token(CLASS);
      t = Identifier();
      jj_consume_token(EXTENDS);
      parentClass = Identifier();
                s_id=new SymbId( t.image );

                c=new Symbols.Class( s_id, "",jjtn000.pos(jj_input_stream), parentClass.image );

                if( jjtn000._symbols.get(new SymbId( s_id,"this" ))==null )
                        jjtn000._symbols.put( new SymbId(s_id,"this"), new Symbols.Variable(new SymbId(s_id,"this"), t.image,"","java") );
                jjtn000._types.put( s_id, c );
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case INTEGER:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        var = VarDeclaration(s_id);
                                                c._variables.put(var. _name.getName(),var);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        func = MethodDeclaration(s_id);
                                        c._methods  .put(func._name.getName(),func);
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Symbols.Variable VarDeclaration(SymbId path) throws ParseException {
 /*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String type;
  String pos;
  SymbId s_id;
  Symbols.Variable var;
    try {
          pos=jjtn000.pos(jj_input_stream);
      type = Type();
      t = Identifier();
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                s_id=new SymbId(path,t.image);
                var=new Symbols.Variable(s_id,type,"",pos);
                jjtn000._symbols.put( s_id, var );
                {if (true) return var;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Function MethodDeclaration(SymbId path) throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String type;
  Symbols.Function func;
  String pos;
  SymbId s_id;
  Symbols.Variable ret;
    try {
    pos=jjtn000.pos(jj_input_stream);
      jj_consume_token(PUBLIC);
      type = Type();
      t = Identifier();
                s_id=new SymbId( path,t.image );
                func=new Symbols.Function( s_id,type,"",pos );
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        func._variables = FormalParameterList(s_id);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        VarDeclaration(s_id);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case PRINT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        Statement(s_id);
      }
      jj_consume_token(RETURN);
      ret = Expression(s_id);
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);

     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
                func._return=ret;
                jjtn000._methods.put( s_id, func );
                {if (true) return func;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Symbols.Variable> FormalParameterList(SymbId path) throws ParseException {
        Vector<Symbols.Variable> list=new Vector<Symbols.Variable>();
        Symbols.Variable par;
    par = FormalParameter(path);
    list.add( par );
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      par = FormalParameterRest(path);
          list.add( par );
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable FormalParameter(SymbId path) throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String type;
  String pos;
  Symbols.Variable symb;
  SymbId s_id;
    try {
                pos=jjtn000.pos(jj_input_stream);
      type = Type();
      t = Identifier();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                s_id=new SymbId( path, t.image );
                symb=new Symbols.Variable( s_id,type,"",pos );
                jjtn000._symbols.put( s_id,symb );
                {if (true) return symb;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable FormalParameterRest(SymbId path) throws ParseException {
  Symbols.Variable symb;
    jj_consume_token(47);
    symb = FormalParameter(path);
    {if (true) return symb;}
    throw new Error("Missing return statement in function");
  }

  static final public String Type() throws ParseException {
 /*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String ret;
    try {
      if (jj_2_3(3)) {
        ret = ArrayType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
          ret = BooleanType();
          break;
        case INTEGER:
          ret = IntegerType();
          break;
        case IDENTIFIER:
          t = Identifier();
                ret=t.image;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return ret;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ArrayType() throws ParseException {
 /*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
      jj_consume_token(LSQPAREN);
      jj_consume_token(RSQPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                {if (true) return "int[]";}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String BooleanType() throws ParseException {
    jj_consume_token(BOOLEAN);
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  static final public String IntegerType() throws ParseException {
    jj_consume_token(INTEGER);
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  static final public void Statement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block(scope);
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_4(2)) {
          AssignmentStatement(scope);
        } else if (jj_2_5(2)) {
          ArrayAssignmentStatement(scope);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            IfStatement(scope);
            break;
          case WHILE:
            WhileStatement(scope);
            break;
          case PRINT:
            PrintStatement(scope);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Block(SymbId scope) throws ParseException {
 /*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String unique_name;
        SymbId subscope;
    try {
                unique_name="block_"+jjtn000.pos(jj_input_stream);
                subscope=new SymbId( scope, unique_name );
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case PRINT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        Statement(scope);
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AssignmentStatement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
        ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        Symbols.Variable left,right;
    try {
      t = Identifier();
      jj_consume_token(ASSIGN);
      right = Expression(scope);
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                left=jjtn000.variableLookup( t.image,scope );
                if( left==right && right==null ) {if (true) return;} // either int=int or something like this
                if( (left!=null && right==null) ||
                        (left==null && right!=null) )
                {
                        {if (true) return;}
                        {if (true) throw new Error( "Syntax error in assignment "+jjtn000.pos(jj_input_stream) );}
                }

                if( right instanceof Symbols.Heap )
                        jjtn000._vP0.add( new Relations.vP(left,right) );
                else
                        jjtn000._assign.add( new Relations.vP(left,right) );
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArrayAssignmentStatement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) ArrayAssignmentStatement */
  ASTArrayAssignmentStatement jjtn000 = new ASTArrayAssignmentStatement(JJTARRAYASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(LSQPAREN);
      Expression(scope);
      jj_consume_token(RSQPAREN);
      jj_consume_token(ASSIGN);
      Expression(scope);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfStatement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String unique_name;
        SymbId subscope;
    try {
                unique_name="if_"+jjtn000.pos(jj_input_stream);
                subscope=new SymbId( scope, unique_name );
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression(scope);
      jj_consume_token(RPAREN);
      Statement(subscope);
      jj_consume_token(ELSE);
      Statement(subscope);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileStatement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String unique_name;
        SymbId subscope;
    try {
                unique_name="while_"+jjtn000.pos(jj_input_stream);
                subscope=new SymbId( scope, unique_name );
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression(subscope);
      jj_consume_token(RPAREN);
      Statement(subscope);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PrintStatement(SymbId scope) throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      Expression(scope);
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Symbols.Variable Expression(SymbId scope) throws ParseException {
 /*@bgen(jjtree) Expression */
        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Symbols.Variable ret=null;
    try {
      if (jj_2_6(2147483647)) {
        AndExpression(scope);
      } else if (jj_2_7(2147483647)) {
        CompareExpression(scope);
      } else if (jj_2_8(2147483647)) {
        PlusExpression(scope);
      } else if (jj_2_9(2147483647)) {
        MinusExpression(scope);
      } else if (jj_2_10(2147483647)) {
        TimesExpression(scope);
      } else if (jj_2_11(2147483647)) {
        ArrayLookup(scope);
      } else if (jj_2_12(2147483647)) {
        ArrayLength(scope);
      } else if (jj_2_13(2147483647)) {
        ret = MessageSend(scope);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case NOT:
        case FALSE:
        case NEW:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ret = PrimaryExpression(scope);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return ret;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void AndExpression(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(AND);
    PrimaryExpression(scope);
  }

  static final public void CompareExpression(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(LT);
    PrimaryExpression(scope);
  }

  static final public void PlusExpression(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(PLUS);
    PrimaryExpression(scope);
  }

  static final public void MinusExpression(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(MINUS);
    PrimaryExpression(scope);
  }

  static final public void TimesExpression(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(48);
    PrimaryExpression(scope);
  }

  static final public void ArrayLookup(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(LSQPAREN);
    PrimaryExpression(scope);
    jj_consume_token(RSQPAREN);
  }

  static final public void ArrayLength(SymbId scope) throws ParseException {
    PrimaryExpression(scope);
    jj_consume_token(DOT);
    jj_consume_token(LENGTH);
  }

  static final public Symbols.Variable MessageSend(SymbId scope) throws ParseException {
 /*@bgen(jjtree) MessageSend */
        ASTMessageSend jjtn000 = new ASTMessageSend(JJTMESSAGESEND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Symbols.Variable var;
        Token t;
        Vector<Symbols.Variable> actual_params=new Vector<Symbols.Variable>();
        String pos;
    try {
          pos=jjtn000.pos(jj_input_stream);
      var = PrimaryExpression(scope);
      jj_consume_token(DOT);
      t = Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case NOT:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        actual_params = ExpressionList(scope);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                if( var==null ) {if (true) throw new Error( "Method call on non-class variable ["+pos+"]" );}
                Symbols.ReturnVariable ret=new Symbols.ReturnVariable( new SymbId(scope,t.image+"$call"),"",pos );

                jjtn000._calls.add( new Symbols.Call(var, t.image, actual_params, "", pos, ret) );

                jjtn000._symbols.put( new SymbId(scope,t.image+"$call"), ret );
                {if (true) return ret;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Symbols.Variable> ExpressionList(SymbId scope) throws ParseException {
        Vector<Symbols.Variable> list=new Vector<Symbols.Variable>();
        Symbols.Variable var;
    var = Expression(scope);
          list.add( var );
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      var = ExpressionRest(scope);
                  list.add( var );
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable ExpressionRest(SymbId scope) throws ParseException {
        Symbols.Variable var;
    jj_consume_token(47);
    var = Expression(scope);
          {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable PrimaryExpression(SymbId scope) throws ParseException {
 /*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Symbols.Variable ret=null;
        Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        IntegerLiteral();
        break;
      case TRUE:
        TrueLiteral();
        break;
      case FALSE:
        FalseLiteral();
        break;
      case IDENTIFIER:
        t = Identifier();
    ret=jjtn000.variableLookup(t.image,scope);
        break;
      case THIS:
        ret = ThisExpression(scope);
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_14(3)) {
          ret = ArrayAllocationExpression(scope);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
            ret = AllocationExpression(scope);
            break;
          case NOT:
            NotExpression(scope);
            break;
          case LPAREN:
            ret = BracketExpression(scope);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return ret;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IntegerLiteral() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  static final public void TrueLiteral() throws ParseException {
    jj_consume_token(TRUE);
  }

  static final public void FalseLiteral() throws ParseException {
    jj_consume_token(FALSE);
  }

  static final public Token Identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable ThisExpression(SymbId path) throws ParseException {
 /*@bgen(jjtree) ThisExpression */
  ASTThisExpression jjtn000 = new ASTThisExpression(JJTTHISEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000.variableLookup( "this", path );}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable ArrayAllocationExpression(SymbId path) throws ParseException {
 /*@bgen(jjtree) ArrayAllocationExpression */
        ASTArrayAllocationExpression jjtn000 = new ASTArrayAllocationExpression(JJTARRAYALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Symbols.Heap heap;
        String pos;
    try {
    pos=jjtn000.pos(jj_input_stream);
      jj_consume_token(NEW);
      jj_consume_token(INTEGER);
      jj_consume_token(LSQPAREN);
      Expression(path);
      jj_consume_token(RSQPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                heap=new Symbols.Heap( new SymbId("new int[]"),"int[]","",pos );
                jjtn000._heaps.add( heap );
                {if (true) return heap;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Symbols.Variable AllocationExpression(SymbId path) throws ParseException {
 /*@bgen(jjtree) AllocationExpression */
        ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Symbols.Heap heap;
        String pos;
        Token t;
    try {
    pos=jjtn000.pos(jj_input_stream);
      jj_consume_token(NEW);
      t = Identifier();
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
                heap=new Symbols.Heap( new SymbId("new "+t.image+"()"),t.image,"",pos );
                jjtn000._heaps.add( heap );

                Symbols.Variable var=jjtn000._symbols.get( new SymbId(new SymbId( t.image ),"this") );
                if( var==null )
                {
                        var=new Symbols.Variable( new SymbId(new SymbId( t.image ),"this"),t.image,"","java" );
                        jjtn000._symbols.put( new SymbId(new SymbId( t.image ),"this"), var );
                }

                {if (true) return var;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void NotExpression(SymbId path) throws ParseException {
    jj_consume_token(NOT);
    Expression(path);
  }

  static final public Symbols.Variable BracketExpression(SymbId path) throws ParseException {
        Symbols.Variable ret;
    jj_consume_token(LPAREN);
    ret = Expression(path);
    jj_consume_token(RPAREN);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_51()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_3R_50()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_3R_49()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_46()) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_3R_45()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_53()) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_44()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_3R_19()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_28()) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public MiniJavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1000000,0x1000000,0x80800000,0x0,0x80800000,0x0,0x80800000,0x60002000,0x0,0x80800000,0x2000,0x60000000,0x60002000,0x10400200,0x10400200,0x0,0x10000000,0x400200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1000,0x8,0x1000,0x8,0x1000,0x1200,0x8000,0x1000,0x0,0x200,0x1200,0x1984,0x1984,0x8000,0x1980,0x4,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[49];
    for (int i = 0; i < 49; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
