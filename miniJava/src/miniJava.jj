/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./miniJava.jj */
/*@egen*/options {
  JAVA_UNICODE_ESCAPE = true;                                             
}

PARSER_BEGIN(MiniJavaParser)
import java.util.List;
import java.util.Vector;

  public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();

/*@egen*/
  
  }
PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >         
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


void Goal() :
{/*@bgen(jjtree) Goal */
  ASTGoal jjtn000 = new ASTGoal(JJTGOAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Goal */
  try {
/*@egen*/
  MainClass()
  ( TypeDeclaration() )*
  <EOF>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MainClass() :
{/*@bgen(jjtree) MainClass */
        ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MainClass */
  try {
/*@egen*/
  "class" t=Identifier() "{"
    "public" "static" "void" "main" "(" "String" "[" "]" Identifier() ")"   
    "{" PrintStatement( new SymbId(new SymbId( t.image ),"main") )  "}"
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeDeclaration() :  
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
  try {
/*@egen*/ 
  LOOKAHEAD(3)
  ClassDeclaration()
|
  ClassExtendsDeclaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassDeclaration() :
{/*@bgen(jjtree) ClassDeclaration */
        ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	String oldPath="";
	Symbols.Class c;
	SymbId s_id;
	Symbols.Variable var;
	Symbols.Function func;
}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	"class" t=Identifier()
	{
		s_id=new SymbId( t.image );
		c=new Symbols.Class( s_id, "", jjtn000.pos(jj_input_stream), null );

		if( jjtn000._symbols.get(new SymbId( s_id,"this" ))==null )
			jjtn000._symbols.put( new SymbId(s_id,"this"), new Symbols.Variable(new SymbId(s_id,"this"), t.image,"","java") );
		jjtn000._types.put( s_id, c );
	} 
  	"{" 
  		( var =VarDeclaration   (s_id) {c._variables.put(var ._name.getName(),var);} )* 
        ( func=MethodDeclaration(s_id) {c._methods  .put(func._name.getName(),func); })*
    "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassExtendsDeclaration() :
{/*@bgen(jjtree) ClassExtendsDeclaration */
        ASTClassExtendsDeclaration jjtn000 = new ASTClassExtendsDeclaration(JJTCLASSEXTENDSDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	Token parentClass;
	String oldPath;
	Symbols.Class symbol;
	Symbols.Class c;
	SymbId s_id;
	Symbols.Variable var;
	Symbols.Function func;
}
{/*@bgen(jjtree) ClassExtendsDeclaration */
  try {
/*@egen*/
  "class" t=Identifier() "extends" parentClass=Identifier()
  {
  		s_id=new SymbId( t.image );
  		
  		c=new Symbols.Class( s_id, "",jjtn000.pos(jj_input_stream), parentClass.image );
		
		if( jjtn000._symbols.get(new SymbId( s_id,"this" ))==null )
			jjtn000._symbols.put( new SymbId(s_id,"this"), new Symbols.Variable(new SymbId(s_id,"this"), t.image,"","java") );
  		jjtn000._types.put( s_id, c );
  }
  
   "{" 
  		( var =VarDeclaration   (s_id) {c._variables.put(var. _name.getName(),var);} )* 
        ( func=MethodDeclaration(s_id) {c._methods  .put(func._name.getName(),func); })*
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbols.Variable VarDeclaration( SymbId path ) :  
{/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; 
  String type;
  String pos;
  SymbId s_id;
  Symbols.Variable var;
 }
{/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/ 
	{ pos=jjtn000.pos(jj_input_stream); }
	type=Type() t=Identifier() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		s_id=new SymbId(path,t.image);
		var=new Symbols.Variable(s_id,type,"",pos);
		jjtn000._symbols.put( s_id, var );
		return var;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/      
}

Symbols.Function MethodDeclaration( SymbId path )  :  
{/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; 
  String type;
  Symbols.Function func;
  String pos;
  SymbId s_id;
  Symbols.Variable ret;
}
{/*@bgen(jjtree) MethodDeclaration */
  try {
/*@egen*/
  { pos=jjtn000.pos(jj_input_stream); }
  "public" type=Type() t=Identifier() 
  {
  		s_id=new SymbId( path,t.image );
		func=new Symbols.Function( s_id,type,"",pos );
  }
  
  "(" ( func._variables=FormalParameterList( s_id ) )? ")"   
  
  "{" ( LOOKAHEAD(2) VarDeclaration(s_id) )* 
      ( Statement(s_id) )* "return" ret=Expression(s_id) ";" "}" { /* we are only interested if return value is variable or heap */}/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
      
   {
   		func._return=ret;
   		jjtn000._methods.put( s_id, func );
   		return func;
   }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Vector<Symbols.Variable> FormalParameterList(SymbId path)       :
{
	Vector<Symbols.Variable> list=new Vector<Symbols.Variable>();
	Symbols.Variable par;
}
{
  par=FormalParameter(path) 
  { list.add( par ); }
  ( 
  	par=FormalParameterRest(path)
  	{ list.add( par ); } 
  )*
  
  { return list; }
}

Symbols.Variable FormalParameter(SymbId path) :
{/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; 
  String type;
  String pos;
  Symbols.Variable symb; 
  SymbId s_id;
}
{/*@bgen(jjtree) FormalParameter */
        try {
/*@egen*/
	{ 	
		pos=jjtn000.pos(jj_input_stream); 
	}
	type=Type() t=Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		s_id=new SymbId( path, t.image );
		symb=new Symbols.Variable( s_id,type,"",pos );
		jjtn000._symbols.put( s_id,symb );
		return symb;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Symbols.Variable FormalParameterRest(SymbId path)       :
{ Symbols.Variable symb; }
{
  "," symb=FormalParameter(path)
  { return symb; }  
}

String Type() :
{/*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/ 
	Token t; 
	String ret;
}
{/*@bgen(jjtree) Type */
try {
/*@egen*/
(
  LOOKAHEAD(3)
  ret=ArrayType()
|
  ret=BooleanType()
|
  ret=IntegerType()
|
  t=Identifier()  
  {
  		ret=t.image;
  }
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return ret; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/   
}

String ArrayType() :
{/*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ArrayType */
  try {
/*@egen*/  
  "int" "[" "]"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  { 
  		return "int[]";
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String BooleanType()       :
{}
{
  "boolean"
  
  { return ""; }
}

String IntegerType()       :
{}
{
  "int"
  
  { return ""; }
}

void Statement(SymbId scope) :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  Block(scope)
| 
  LOOKAHEAD(2)
  AssignmentStatement(scope)
|
  LOOKAHEAD(2)
  ArrayAssignmentStatement(scope)
|
  IfStatement(scope)
|
  WhileStatement(scope)
|
  PrintStatement(scope)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Block(SymbId scope)  :
{/*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String unique_name;
	SymbId subscope;
}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	{
		unique_name="block_"+jjtn000.pos(jj_input_stream);
		subscope=new SymbId( scope, unique_name );
	}
  "{" ( Statement(scope) )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssignmentStatement(SymbId scope)  :
{/*@bgen(jjtree) AssignmentStatement */
        ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	Symbols.Variable left,right;
}
{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  t=Identifier() "=" right=Expression(scope) ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  {
		left=jjtn000.variableLookup( t.image,scope );
		if( left==right && right==null ) return; // either int=int or something like this
		if( (left!=null && right==null) ||
			(left==null && right!=null) ) 
		{
			return;
			throw new Error( "Syntax error in assignment "+jjtn000.pos(jj_input_stream) );
		}
		
		if( right instanceof Symbols.Heap )
			jjtn000._vP0.add( new Relations.vP(left,right) );
		else
			jjtn000._assign.add( new Relations.vP(left,right) );
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayAssignmentStatement(SymbId scope)  : // do not care about this assignment. 
											   // Because it's applicable only to integer array elements assignments
{/*@bgen(jjtree) ArrayAssignmentStatement */
  ASTArrayAssignmentStatement jjtn000 = new ASTArrayAssignmentStatement(JJTARRAYASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAssignmentStatement */
  try {
/*@egen*/
  Identifier() "[" Expression(scope) "]" "=" Expression(scope) ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStatement(SymbId scope)  :
{/*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String unique_name;
	SymbId subscope;
}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	{
		unique_name="if_"+jjtn000.pos(jj_input_stream);
		subscope=new SymbId( scope, unique_name );
	}
	"if" "(" Expression(scope) ")" Statement(subscope) "else" Statement(subscope)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void WhileStatement(SymbId scope) :
{/*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String unique_name;
	SymbId subscope;
}
{/*@bgen(jjtree) WhileStatement */
        try {
/*@egen*/
	{
		unique_name="while_"+jjtn000.pos(jj_input_stream);
		subscope=new SymbId( scope, unique_name );
	}
  "while" "(" Expression(subscope) ")" Statement(subscope)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void PrintStatement(SymbId scope)            :
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  "System.out.println" "(" Expression(scope) ")" ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbols.Variable Expression(SymbId scope) :
{/*@bgen(jjtree) Expression */
        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Symbols.Variable ret=null;
}
{/*@bgen(jjtree) Expression */
try {
/*@egen*/
(
  LOOKAHEAD( PrimaryExpression(scope) "&&" )
  AndExpression(scope) // return value can't be variable or heap
|
  LOOKAHEAD( PrimaryExpression(scope) "<" )
  CompareExpression(scope) // return value can't be variable or heap
|
  LOOKAHEAD( PrimaryExpression(scope) "+" )
  PlusExpression(scope) // return value can be only int type
|
  LOOKAHEAD( PrimaryExpression(scope) "-" )
  MinusExpression(scope) // return value can be only int type
|
  LOOKAHEAD( PrimaryExpression(scope) "*" )
  TimesExpression(scope) // return value can be only int type
|
  LOOKAHEAD( PrimaryExpression(scope) "[" )
  ArrayLookup(scope) // return value can be only int type
|
  LOOKAHEAD( PrimaryExpression(scope) "." "length" )
  ArrayLength(scope) // return value can be only int type
|
  LOOKAHEAD( PrimaryExpression(scope) "." Identifier() "(" )
  ret=MessageSend(scope)
| 
  ret=PrimaryExpression(scope)
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return ret; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void AndExpression(SymbId scope)       :
{} 
{
  PrimaryExpression(scope) "&&" PrimaryExpression(scope)
}

void CompareExpression(SymbId scope)       :
{} 
{
  PrimaryExpression(scope) "<" PrimaryExpression(scope)
}

void PlusExpression(SymbId scope)       :
{}
{
  PrimaryExpression(scope) "+" PrimaryExpression(scope)
}

void MinusExpression(SymbId scope)       :
{}
{
  PrimaryExpression(scope) "-" PrimaryExpression(scope)
}

void TimesExpression(SymbId scope)       :
{}
{
  PrimaryExpression(scope) "*" PrimaryExpression(scope)
}

void ArrayLookup(SymbId scope)       :
{}
{
  PrimaryExpression(scope) "[" PrimaryExpression(scope) "]"
}

void ArrayLength(SymbId scope)       :
{}
{
  PrimaryExpression(scope) "." "length"
}

Symbols.Variable MessageSend(SymbId scope)  :
{/*@bgen(jjtree) MessageSend */
        ASTMessageSend jjtn000 = new ASTMessageSend(JJTMESSAGESEND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Symbols.Variable var;
	Token t;
	Vector<Symbols.Variable> actual_params=new Vector<Symbols.Variable>();
	String pos;
}
{/*@bgen(jjtree) MessageSend */
        try {
/*@egen*/
	{ pos=jjtn000.pos(jj_input_stream); }

	  var=PrimaryExpression(scope) "." t=Identifier() 
	  "(" ( actual_params=ExpressionList(scope) )? ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {
  		if( var==null ) throw new Error( "Method call on non-class variable ["+pos+"]" );
		Symbols.ReturnVariable ret=new Symbols.ReturnVariable( new SymbId(scope,t.image+"$call"),"",pos );

   		jjtn000._calls.add( new Symbols.Call(var, t.image, actual_params, "", pos, ret) );
		
		jjtn000._symbols.put( new SymbId(scope,t.image+"$call"), ret );
		return ret;
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Vector<Symbols.Variable> ExpressionList(SymbId scope)       :
{
	Vector<Symbols.Variable> list=new Vector<Symbols.Variable>();
	Symbols.Variable var;
}
{
	var=Expression(scope)
	{ list.add( var ); }
	 
	( 
		var=ExpressionRest(scope) 
		{ list.add( var ); }
	)*
	
	{ return list; }
}

Symbols.Variable ExpressionRest(SymbId scope)       :
{
	Symbols.Variable var; 
}
{
	"," var=Expression(scope)
	{ return var; }
}

Symbols.Variable PrimaryExpression(SymbId scope) :
{/*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Symbols.Variable ret=null;
	Token t;
}
{/*@bgen(jjtree) PrimaryExpression */
try {
/*@egen*/
(
  IntegerLiteral()
|
  TrueLiteral()
|
  FalseLiteral()
|
  t=Identifier()
  { ret=jjtn000.variableLookup(t.image,scope); }
|
  ret=ThisExpression(scope)
|
  LOOKAHEAD(3)
  ret=ArrayAllocationExpression(scope)
|
  ret=AllocationExpression(scope)
|   
  NotExpression(scope)
|   
  ret=BracketExpression(scope)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return ret; }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void IntegerLiteral()       :
{}
{
  <INTEGER_LITERAL>
}


void TrueLiteral()       :
{}
{
  "true"
}

void FalseLiteral()       :
{}
{
  "false"
}

Token Identifier()       :
{ Token t; }
{
   t=<IDENTIFIER>
   {return t;}
}

Symbols.Variable ThisExpression(SymbId path)  :
{/*@bgen(jjtree) ThisExpression */
  ASTThisExpression jjtn000 = new ASTThisExpression(JJTTHISEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThisExpression */
  try {
/*@egen*/
  "this"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000.variableLookup( "this", path ); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbols.Variable ArrayAllocationExpression(SymbId path)  :
{/*@bgen(jjtree) ArrayAllocationExpression */
        ASTArrayAllocationExpression jjtn000 = new ASTArrayAllocationExpression(JJTARRAYALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Symbols.Heap heap;
	String pos;
}
{/*@bgen(jjtree) ArrayAllocationExpression */
  try {
/*@egen*/
  { pos=jjtn000.pos(jj_input_stream); }
  "new" "int" "[" Expression(path) "]"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
		heap=new Symbols.Heap( new SymbId("new int[]"),"int[]","",pos );
		jjtn000._heaps.add( heap );
		return heap; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbols.Variable AllocationExpression(SymbId path) :
{/*@bgen(jjtree) AllocationExpression */
        ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Symbols.Heap heap;
	String pos;
	Token t;
}
{/*@bgen(jjtree) AllocationExpression */
  try {
/*@egen*/
  { pos=jjtn000.pos(jj_input_stream); }
  "new" t=Identifier() "(" ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
		heap=new Symbols.Heap( new SymbId("new "+t.image+"()"),t.image,"",pos );
		jjtn000._heaps.add( heap );
		
		Symbols.Variable var=jjtn000._symbols.get( new SymbId(new SymbId( t.image ),"this") );
		if( var==null ) 
		{
			var=new Symbols.Variable( new SymbId(new SymbId( t.image ),"this"),t.image,"","java" );
			jjtn000._symbols.put( new SymbId(new SymbId( t.image ),"this"), var );
		}
				
		return var;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NotExpression(SymbId path)       :
{}
{
  "!" Expression(path) 
}

Symbols.Variable BracketExpression(SymbId path)       :
{
	Symbols.Variable ret;
}
{
  "(" ret=Expression(path) ")"
  { return ret; }
}

